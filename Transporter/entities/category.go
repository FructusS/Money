package entities

import "database/sql"

type Category struct {
	BaseTable[OldCategory, NewCategory]
}

func (table *Category) Transform(old OldCategory) NewCategory {
	return NewCategory{
		Id:          old.Id,
		UserId:      old.UserId,
		Name:        old.Name,
		Description: sql.NullString{},
		ParentId:    old.ParentId,
		Color:       old.Color,
		TypeId:      old.TypeId,
		Order:       old.Order,
		IsDeleted:   false,
	}
}

type OldCategory struct {
	Id          int    `db:"Id"`
	UserId      int    `db:"UserId"`
	CategoryId  int    `db:"CategoryId"`
	Name        string `db:"Name"`
	Description string `db:"Description"`
	ParentId    string `db:"ParentId"`
	Color       string `db:"Color"`
	TypeId      int    `db:"TypeId"`
	Order       int    `db:"Order"`
}

/*
create table "Money.Category"
(
"Id"          integer generated by default as identity
"UserId"      integer       not null
"CategoryId"  integer       not null,
"Name"        varchar(500)  not null,
"Description" varchar(4000) not null,
"ParentId"    integer,
"Color"       varchar(100)  not null,
"TypeId"      integer       not null,
"Order"       integer
);
*/

type NewCategory struct {
	Id          int            `db:"id"`
	UserId      int            `db:"user_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	ParentId    string         `db:"parent_id"`
	Color       string         `db:"color"`
	TypeId      int            `db:"type_id"`
	Order       int            `db:"order"`
	IsDeleted   bool           `db:"is_deleted"`
}

/*
create table categories
(
user_id     integer               not null
id          integer               not null,
name        varchar(500)          not null,
description varchar(4000),
parent_id   integer,
color       varchar(100),
type_id     integer               not null,
"order"     integer,
is_deleted  boolean default false not null,
);
*/
